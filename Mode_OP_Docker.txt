Create network for communication between appi and mysql :
	docker network create api-home-app-mysql
	docker network ls
	
We will use the image provided by dockerhub to run as container :
	docker container run --name mysqldb-home-app --network api-home-app-mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=springboot-tuto -d mysql:8
list of container to verify was correctly created
	docker container ls
	
Check the log, to ensure all is ok :
	docker container logs -f <id_container>
	
Connect to container mysql, to check if database was created :
docker container exec -it <id_container> bash
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| springboot-tuto    |
| sys                |
+--------------------+ ==> OK

Add a dockerfile :
	FROM openjdk:8
	MAINTAINER Youness CHAFIA
	COPY ./target/gateway-api-home-app.jar gateway-api-home-app.jar
	CMD ["java","-jar","gateway-api-home-app.jar"]

	
Create an image for Gateway from Dockerfile :
	docker image build -t gateway-api-home-app-image .
	docker image build -t gateway-api-home-app-image-armv7 .

Next run this as a container :
	docker container run --network api-home-app-mysql --name gateway-api-home-app-container -p 8080:8080 -d gateway-api-home-app-image

list container : docker container ls
PS C:\Windows\system32> docker container ls
CONTAINER ID        IMAGE                        COMMAND                  CREATED             STATUS              PORTS                    NAMES
42772d3e71af        gateway-api-home-app-image   "java -jar gateway-a…"   4 seconds ago       Up 3 seconds        0.0.0.0:8080->8080/tcp   gateway-api-home-app-container
f52d9b2280f9        mysql:8                      "docker-entrypoint.s…"   42 minutes ago      Up 42 minutes       3306/tcp, 33060/tcp      mysqldb-home-app


IDEM for other API's :
docker image build -t mes-courses-api-image .
docker image build -t mes-courses-api-image-armv7 .
docker container run --network api-home-app-mysql --name mes-courses-api-container -p 8090:8090 -d mes-courses-api-image

docker image build -t config-server-app-image .

docker image build -t mes-notes-api-image .
docker image build -t mes-notes-api-image-armv7 .
docker container run --network api-home-app-mysql --name mes-notes-api-container -p 8070:8070 -d mes-notes-api-image

==========================================
Publish an image in docker hub :
	docker image ls
	docker login -u younesschafia
	
	docker image tag gateway-api-home-app-image younesschafia/gateway-api-home-app-image
	docker image push younesschafia/gateway-api-home-app-image
	
	docker image tag config-server-app-image younesschafia/config-server-app-image
	docker image push younesschafia/config-server-app-image
	
Same things for other API :
	docker image tag mes-courses-api-image younesschafia/mes-courses-api-image
	docker image push younesschafia/mes-courses-api-image
	
	docker image tag mes-notes-api-image younesschafia/mes-notes-api-image
	docker image push younesschafia/mes-notes-api-image

	docker image tag mes-epargnes-api-image younesschafia/mes-epargnes-api-image:3.1
	docker image push younesschafia/mes-epargnes-api-image:3.1

If is an existing image, you will publish th new version of image with an other tag:
	docker push younesschafia/gateway-api-home-app-image-armv7:2
	
Add a tag to image :
	1) docker tag gateway-api-home-app-image-armv7 younesschafia/gateway-api-home-app-image-armv7:2
	2) docker push younesschafia/gateway-api-home-app-image-armv7:2

	
Mount a shared volume between host and container :
	1) Open "Settings" in Docker Desktop -> "Shared Drives" -> "Reset Credentials" -> select drive "C" -> "Apply"
	2) docker run --rm -v c:/tmp:/data gateway-api-home-app-image ls /data
	3) in docker-compose, add volumes:
      - c:/tmp:/data
======================== PROD
(image mysql for raspberry : docker pull hypriot/rpi-mysql)

docker network create api-home-app-mysql
docker container run --name mysqldb-home-app --network api-home-app-mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=springboot-tuto -d hypriot/rpi-mysql

docker container run --network api-home-app-mysql --name gateway-api-home-app-container -p 8080:8080 -d younesschafia/gateway-api-home-app-image
docker container run --network api-home-app-mysql --name gateway-api-home-app-armv7-container -p 8080:8080 -d younesschafia/gateway-api-home-app-image

Access to bash container :
	docker container exec -it <id_container> bash
	
docker container run --network api-home-app-mysql --name gateway-api-home-app-armv7-container -p 8080:8080 -d younesschafia/gateway-api-home-app-image-armv7:2
docker container run --network api-home-app-mysql --name mes-courses-api-armv7-container -p 8090:8090 -d younesschafia/mes-courses-api-image-armv7:2
docker container run --network api-home-app-mysql --name mes-notes-api-armv7-container -p 8070:8070 -d younesschafia/mes-notes-api-image-armv7:2

===============================
We can define dependency with depend_on attribut to start container order.
But, because docker-compose cano't khnow if th container is correctly started, we should launch container with this command : 


docker container run --name mysqldb-home-app --network api-home-app-mysql -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=springboot-tuto -d mysql:8
docker container run --network api-home-app-mysql --name config-server-app-container -p 8888:8888 -d younesschafia/config-server-app-image
docker container run --network api-home-app-mysql --name gateway-api-home-app-container -p 8080:8080 -d younesschafia/gateway-api-home-app-image:2.3
docker container logs -f gateway-api-home-app-container


docker container run --network api-home-app-mysql --name mes-courses-api-container -p 8090:8090 -d younesschafia/mes-courses-api-image:2.3
docker container run --network api-home-app-mysql --name mes-notes-api-container -p 8070:8070 -d younesschafia/mes-notes-api-image:2.3



config-server-app-image-armv7


##########################################################################"

#### Config-server :
mvn clean install -DskipTests
docker image build -t config-server-app-image .
docker container run --network api-home-app-mysql --name config-server-app-container -p 8888:8888 -d config-server-app-image

#### Gateway :
mvn clean install -DskipTests
docker image build -t gateway-api-home-app-image .
docker container run --network api-home-app-mysql --name gateway-api-home-app-container -p 8080:8080 -d gateway-api-home-app-image

#### Mes-courses :
mvn clean install -DskipTests
docker image build -t mes-courses-api-image .
docker container run --network api-home-app-mysql --name mes-courses-api-container -p 8090:8090 -d mes-courses-api-image

#### Mes-notes :
mvn clean install -DskipTests
docker image build -t mes-notes-api-image .
docker container run --network api-home-app-mysql --name mes-notes-api-container -p 8070:8070 -d mes-notes-api-image

#### Mes-epargnes :
mvn clean install -DskipTests
docker image build -t mes-epargnes-api-image .
docker container run --network api-home-app-mysql --name mes-epargnes-api-container -p 8060:8060 -d mes-epargnes-api-image



